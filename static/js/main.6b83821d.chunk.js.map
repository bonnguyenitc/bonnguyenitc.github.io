{"version":3,"sources":["components/TextView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TextView","value","onClick","label","inputRef","Fragment","Grid","container","direction","className","xs","item","TextField","ref","multiline","type","name","id","variant","Button","disabled","document","queryCommandSupported","color","focus","removeAccents","str","AccentsMap","i","length","re","RegExp","substr","char","replace","App","React","bapSong","setBapSong","bapChin","setBapChin","open","setOpen","hidden","setHidden","upper","setUpper","capital","setCapital","tempt","trim","toLowerCase","toUpperCase","split","map","s","charAt","slice","join","onCopy","text","copy","then","res","Container","fixed","FormControlLabel","control","Switch","checked","onChange","event","target","Snackbar","onClose","reason","anchorOrigin","vertical","horizontal","autoHideDuration","message","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"2TA+CeA,MAtCf,YAA8D,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,MAC9BC,EAAgB,KACpB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,UAAU,oBACxC,kBAACH,EAAA,EAAD,CAAMI,GAAI,EAAGC,MAAI,GACf,kBAACC,EAAA,EAAD,CACER,SAAU,SAAAS,GAAG,OAAKT,EAAWS,GAC7BC,WAAS,EACTL,UAAU,UACVM,KAAK,OACLC,KAAK,UACLC,GAAG,UACHhB,MAAOA,EACPE,MAAOA,EACPe,QAAQ,cAGZ,kBAACZ,EAAA,EAAD,CAAMI,GAAI,EAAGC,MAAI,IACjB,kBAACL,EAAA,EAAD,CAAMI,GAAI,EAAGC,MAAI,GACf,kBAACQ,EAAA,EAAD,CACEC,UAAWC,SAASC,sBAAsB,QAC1CJ,QAAQ,YACRK,MAAM,UACNd,UAAU,SACVP,QAAS,WACPA,EAAQD,GACRG,GAAYA,EAASoB,UAPzB,YCdV,SAASC,EAAcC,GAiBrB,IAhBA,IAAIC,EAAa,CACf,kGACA,kGACA,UACA,UACA,gEACA,gEACA,8BACA,8BACA,kGACA,kGACA,kEACA,kEACA,gCACA,iCAEOC,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IAAK,CAC1C,IAAIE,EAAK,IAAIC,OAAO,IAAMJ,EAAWC,GAAGI,OAAO,GAAK,IAAK,KACrDC,EAAON,EAAWC,GAAG,GACzBF,EAAMA,EAAIQ,QAAQJ,EAAIG,GAExB,OAAOP,EA2JMS,MAnJf,WAAgB,IAAD,EACiBC,WAC5B,sDAFW,mBACNC,EADM,KACGC,EADH,OAIiBF,WAC5B,2CALW,mBAING,EAJM,KAIGC,EAJH,OAOWJ,YAAe,GAP1B,mBAONK,EAPM,KAOAC,EAPA,OAQeN,YAAe,GAR9B,mBAQNO,EARM,KAQEC,EARF,OASaR,YAAe,GAT5B,mBASNS,EATM,KASCC,EATD,OAUiBV,YAAe,GAVhC,mBAUNW,EAVM,KAUGC,EAVH,KAgBbZ,aAAgB,WACTC,GAASG,EAAW,IACzB,IAAIS,EAAgBZ,EAAQa,OAAOC,cAC/BvB,EAAI,EAIR,IAHIe,IAAQM,EAAQA,EAAMf,QAAQ,aAAc,KAC5CW,IAAOI,EAAQA,EAAMG,eAElBxB,GAAKqB,EAAMpB,QAEhBoB,GADAA,EAAQxB,EAAcwB,IACRf,QAAQ,WAAY,KAC9Ba,IACFE,EAAQA,EACLI,MAAM,KACNC,KAAI,SAAC3C,GAAD,MAjCI,kBADC4C,EAkCwB5C,GAjCR,GAC3B4C,EAAEC,OAAO,GAAGJ,cAAgBG,EAAEE,MAAM,GAF1B,IAACF,KAmCTG,KAAK,MAEVT,EAAQA,EAAMf,QACZ,uFACA,KAEFN,IAGFY,EADAS,EAAQ,SAAWA,KAElB,CAACZ,EAASM,EAAQE,EAAOE,IAE5B,IAAMY,EAAS,SAACC,GACdC,IAAKD,GAAME,MAAK,SAAAC,GACdrB,GAAQ,OAkCZ,OACE,gBAACsB,EAAA,EAAD,CAAWC,OAAK,GACd,gBAAC3D,EAAA,EAAD,CAAME,UAAU,MAAMD,WAAS,EAACE,UAAU,cACxC,0CAEF,gBAACH,EAAA,EAAD,CAAMC,WAAS,EAACE,UAAU,SACxB,gBAACyD,EAAA,EAAD,CACEC,QACE,gBAACC,EAAA,EAAD,CAAQC,QAAS1B,EAAQ2B,SA9Bd,SAACC,GAAD,OAAgB3B,GAAWD,IA8BWpB,MAAM,YAEzDpB,MAAM,uCAER,gBAAC+D,EAAA,EAAD,CACEC,QACE,gBAACC,EAAA,EAAD,CAAQC,QAASxB,EAAOyB,SAnCd,SAACC,GACf1B,EACFC,GAAUD,IAEVC,GAAUD,GACNE,GACFC,GAAYD,KA6BuCxB,MAAM,YAEvDpB,MAAM,YAaV,gBAACG,EAAA,EAAD,CAAMC,WAAS,EAACE,UAAU,SACxB,gBAACH,EAAA,EAAD,CAAMC,WAAS,EAACG,GAAI,EAAGC,MAAI,GACzB,gBAACC,EAAA,EAAD,CACEH,UAAU,UACVM,KAAK,OACLD,WAAS,EACTE,KAAK,UACLC,GAAG,UACHqD,SAvGM,SAACC,GACfjC,EAAWiC,EAAMC,OAAOvE,QAuGhBA,MAAOoC,EACPlC,MAAM,qBACNe,QAAQ,cAGZ,gBAAC,EAAD,CAAUjB,MAAOsC,EAASrC,QAASyD,EAAQxD,MAAM,WACjD,gBAAC,EAAD,CACEF,MAAO,mBAAqBsC,EAC5BrC,QAASyD,EACTxD,MAAM,wBAER,gBAAC,EAAD,CACEF,MAAO,kCAAoCsC,EAC3CrC,QAASyD,EACTxD,MAAM,qBAGV,gBAACsE,EAAA,EAAD,CACEhC,KAAMA,EACNiC,QAvFc,SAACH,EAAYI,GAChB,cAAXA,GAIJjC,GAAQ,IAmFJkC,aAAc,CACZC,SAAU,SACVC,WAAY,QAEdC,iBAAkB,IAClBC,QAAQ,cC9KIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlE,SAASmE,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMf,c","file":"static/js/main.6b83821d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, TextField, Button } from \"@material-ui/core\";\n\ninterface TextFieldProps {\n  value: string;\n  onClick: any;\n  label: string;\n}\n\nfunction TextView({ value, onClick, label }: TextFieldProps) {\n  let inputRef: any = null;\n  return (\n    <React.Fragment>\n      <Grid container direction=\"row\" className=\"BapChinContainer\">\n        <Grid xs={9} item>\n          <TextField\n            inputRef={ref => (inputRef = ref)}\n            multiline\n            className=\"BapChin\"\n            type=\"text\"\n            name=\"bapChin\"\n            id=\"bapChin\"\n            value={value}\n            label={label}\n            variant=\"outlined\"\n          />\n        </Grid>\n        <Grid xs={1} item />\n        <Grid xs={2} item>\n          <Button\n            disabled={!document.queryCommandSupported(\"copy\")}\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"Button\"\n            onClick={() => {\n              onClick(value);\n              inputRef && inputRef.focus();\n            }}\n          >\n            Copy\n          </Button>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nexport default TextView;\n","import * as React from \"react\";\nimport \"./App.css\";\nimport {\n  Container,\n  TextField,\n  Grid,\n  Button,\n  Snackbar,\n  Switch,\n  FormControlLabel\n} from \"@material-ui/core\";\nimport copy from \"clipboard-copy\";\nimport { updateExpression } from \"@babel/types\";\nimport TextView from \"./components/TextView\";\n\nfunction removeAccents(str: string): string {\n  var AccentsMap = [\n    \"aàảãáạăằẳẵắặâầẩẫấậ\",\n    \"AÀẢÃÁẠĂẰẲẴẮẶÂẦẨẪẤẬ\",\n    \"dđ\",\n    \"DĐ\",\n    \"eèẻẽéẹêềểễếệ\",\n    \"EÈẺẼÉẸÊỀỂỄẾỆ\",\n    \"iìỉĩíị\",\n    \"IÌỈĨÍỊ\",\n    \"oòỏõóọôồổỗốộơờởỡớợ\",\n    \"OÒỎÕÓỌÔỒỔỖỐỘƠỜỞỠỚỢ\",\n    \"uùủũúụưừửữứự\",\n    \"UÙỦŨÚỤƯỪỬỮỨỰ\",\n    \"yỳỷỹýỵ\",\n    \"YỲỶỸÝỴ\"\n  ];\n  for (var i = 0; i < AccentsMap.length; i++) {\n    var re = new RegExp(\"[\" + AccentsMap[i].substr(1) + \"]\", \"g\");\n    var char = AccentsMap[i][0];\n    str = str.replace(re, char);\n  }\n  return str;\n}\n\nconst capitalize = (s: string) => {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nfunction App() {\n  const [bapSong, setBapSong] = React.useState(\n    \"#sma123-4567-[app]-Đây là Bap Sống\"\n  );\n  const [bapChin, setBapChin] = React.useState(\n    \"task-#sma123-4567-[app]-day-la-bap-song\"\n  );\n  const [open, setOpen] = React.useState(false);\n  const [hidden, setHidden] = React.useState(false);\n  const [upper, setUpper] = React.useState(false);\n  const [capital, setCapital] = React.useState(false);\n\n  const luocBap = (event: any) => {\n    setBapSong(event.target.value);\n  };\n\n  React.useEffect(() => {\n    if (!bapSong) setBapChin(\"\");\n    let tempt: string = bapSong.trim().toLowerCase();\n    let i = 0;\n    if (hidden) tempt = tempt.replace(/\\[.*?\\]/gim, \"\");\n    if (upper) tempt = tempt.toUpperCase();\n\n    while (i <= tempt.length) {\n      tempt = removeAccents(tempt);\n      tempt = tempt.replace(/\\s|--/gim, \"-\");\n      if (capital) {\n        tempt = tempt\n          .split(\"-\")\n          .map((item: string) => capitalize(item))\n          .join(\"-\");\n      }\n      tempt = tempt.replace(\n        /!|@|%|\\^|\\*|\\(|\\)|\\+|\\=|\\<|\\>|\\?|\\/|,|\\.|\\:|\\;|\\'|\\\"|\\&|\\#|\\[|\\]|~|\\$|_|`|{|}|\\||\\\\/g,\n        \"-\"\n      );\n      i++;\n    }\n    tempt = \"task-#\" + tempt;\n    setBapChin(tempt);\n  }, [bapSong, hidden, upper, capital]);\n\n  const onCopy = (text: string) => {\n    copy(text).then(res => {\n      setOpen(true);\n    });\n  };\n\n  const handleClose = (event: any, reason: any) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const toggleHidden = (event: any) => setHidden(!hidden);\n  const toggleUpper = (event: any) => {\n    if (upper) {\n      setUpper(!upper);\n    } else {\n      setUpper(!upper);\n      if (capital) {\n        setCapital(!capital);\n      }\n    }\n  };\n  const toggleCapital = (event: any) => {\n    if (capital) {\n      setCapital(!capital);\n    } else {\n      setCapital(!capital);\n      if (upper) {\n        setUpper(!upper);\n      }\n    }\n  };\n\n  return (\n    <Container fixed>\n      <Grid direction=\"row\" container className=\"App-header\">\n        <p>BAP GIT TOOL</p>\n      </Grid>\n      <Grid container className=\"Xoong\">\n        <FormControlLabel\n          control={\n            <Switch checked={hidden} onChange={toggleHidden} color=\"primary\" />\n          }\n          label=\"Ẩn type. Vd: [App], [Backend]\"\n        />\n        <FormControlLabel\n          control={\n            <Switch checked={upper} onChange={toggleUpper} color=\"primary\" />\n          }\n          label=\"In hoa\"\n        />\n        {/* <FormControlLabel\n          control={\n            <Switch\n              checked={capital}\n              onChange={toggleCapital}\n              color=\"primary\"\n            />\n          }\n          label=\"In hoa chữ cái đầu của mỗi từ\"\n        /> */}\n      </Grid>\n      <Grid container className=\"Xoong\">\n        <Grid container xs={9} item>\n          <TextField\n            className=\"BapSong\"\n            type=\"text\"\n            multiline\n            name=\"bapSong\"\n            id=\"content\"\n            onChange={luocBap}\n            value={bapSong}\n            label=\"Bắp sống\"\n            variant=\"outlined\"\n          />\n        </Grid>\n        <TextView value={bapChin} onClick={onCopy} label=\"Branch\" />\n        <TextView\n          value={\"git checkout -b \" + bapChin}\n          onClick={onCopy}\n          label=\"Git Checkout Branch\"\n        />\n        <TextView\n          value={\"git push --set-upstream origin \" + bapChin}\n          onClick={onCopy}\n          label=\"Git Push Branch\"\n        />\n      </Grid>\n      <Snackbar\n        open={open}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\"\n        }}\n        autoHideDuration={2000}\n        message=\"Copied!\"\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}