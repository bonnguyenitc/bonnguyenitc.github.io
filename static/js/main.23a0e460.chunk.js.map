{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["removeAccents","str","AccentsMap","i","length","re","RegExp","substr","char","replace","App","React","bapSong","setBapSong","bapChin","setBapChin","open","setOpen","hidden","setHidden","upper","setUpper","capital","setCapital","refBapChin","tempt","trim","toLowerCase","toUpperCase","split","map","item","s","charAt","slice","join","Container","fixed","Grid","direction","container","className","xs","alt","src","height","width","FormControlLabel","control","Switch","checked","onChange","event","color","label","TextField","type","name","id","target","value","variant","ref","multiline","Button","disabled","document","queryCommandSupported","onClick","copy","then","res","Snackbar","onClose","reason","anchorOrigin","vertical","horizontal","autoHideDuration","message","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.23a0e460.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./App.css\";\nimport {\n  Container,\n  TextField,\n  Grid,\n  Button,\n  Snackbar,\n  Switch,\n  FormControlLabel\n} from \"@material-ui/core\";\nimport copy from \"clipboard-copy\";\nimport { updateExpression } from \"@babel/types\";\n\nfunction removeAccents(str: string): string {\n  var AccentsMap = [\n    \"aàảãáạăằẳẵắặâầẩẫấậ\",\n    \"AÀẢÃÁẠĂẰẲẴẮẶÂẦẨẪẤẬ\",\n    \"dđ\",\n    \"DĐ\",\n    \"eèẻẽéẹêềểễếệ\",\n    \"EÈẺẼÉẸÊỀỂỄẾỆ\",\n    \"iìỉĩíị\",\n    \"IÌỈĨÍỊ\",\n    \"oòỏõóọôồổỗốộơờởỡớợ\",\n    \"OÒỎÕÓỌÔỒỔỖỐỘƠỜỞỠỚỢ\",\n    \"uùủũúụưừửữứự\",\n    \"UÙỦŨÚỤƯỪỬỮỨỰ\",\n    \"yỳỷỹýỵ\",\n    \"YỲỶỸÝỴ\"\n  ];\n  for (var i = 0; i < AccentsMap.length; i++) {\n    var re = new RegExp(\"[\" + AccentsMap[i].substr(1) + \"]\", \"g\");\n    var char = AccentsMap[i][0];\n    str = str.replace(re, char);\n  }\n  return str;\n}\n\nconst capitalize = (s: string) => {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nfunction App() {\n  const [bapSong, setBapSong] = React.useState(\"#sma123-4567-Đây là Bap Sống\");\n  const [bapChin, setBapChin] = React.useState(\n    \"task-#sma123-4567-day-la-bap-song\"\n  );\n  const [open, setOpen] = React.useState(false);\n  const [hidden, setHidden] = React.useState(false);\n  const [upper, setUpper] = React.useState(false);\n  const [capital, setCapital] = React.useState(false);\n\n  const refBapChin = React.useRef(null);\n\n  const luocBap = (event: any) => {\n    setBapSong(event.target.value);\n  };\n\n  React.useEffect(() => {\n    if (!bapSong) setBapChin(\"\");\n    let tempt: string = \"task-\" + bapSong.trim().toLowerCase();\n    let i = 0;\n    if (hidden) tempt = tempt.replace(/\\[.*?\\]/gim, \"\");\n    if (upper) tempt = tempt.toUpperCase();\n\n    while (i <= tempt.length) {\n      tempt = removeAccents(tempt);\n      tempt = tempt.replace(/\\s|--/gim, \"-\");\n      if (capital) {\n        tempt = tempt\n          .split(\"-\")\n          .map((item: string) => capitalize(item))\n          .join(\"-\");\n      }\n      setBapChin(tempt);\n      i++;\n    }\n  }, [bapSong, hidden, upper, capital]);\n\n  const onCopy = () => {\n    copy(bapChin).then(res => {\n      setOpen(true);\n    });\n  };\n\n  const handleClose = (event: any, reason: any) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const toggleHidden = (event: any) => setHidden(!hidden);\n  const toggleUpper = (event: any) => {\n    if (upper) {\n      setUpper(!upper);\n    } else {\n      setUpper(!upper);\n      if (capital) {\n        setCapital(!capital);\n      }\n    }\n  };\n  const toggleCapital = (event: any) => {\n    if (capital) {\n      setCapital(!capital);\n    } else {\n      setCapital(!capital);\n      if (upper) {\n        setUpper(!upper);\n      }\n    }\n  };\n\n  return (\n    <Container fixed>\n      <Grid direction=\"row\" container className=\"App-header\">\n        <Grid xs={4} className=\"Avatar-Container\" item>\n          <img\n            alt=\"BAP\"\n            src={process.env.PUBLIC_URL + \"logo.png\"}\n            height=\"100\"\n            width=\"100\"\n            className=\"Avatar\"\n          />\n        </Grid>\n        <Grid xs={8} item>\n          <p>BAP GIT TOOL</p>\n          <p>Generate git branch</p>\n        </Grid>\n      </Grid>\n      <Grid container className=\"Xoong\">\n        <FormControlLabel\n          control={\n            <Switch checked={hidden} onChange={toggleHidden} color=\"primary\" />\n          }\n          label=\"Ẩn type. Vd: [App], [Backend]\"\n        />\n        <FormControlLabel\n          control={\n            <Switch checked={upper} onChange={toggleUpper} color=\"primary\" />\n          }\n          label=\"In hoa\"\n        />\n        {/* <FormControlLabel\n          control={\n            <Switch\n              checked={capital}\n              onChange={toggleCapital}\n              color=\"primary\"\n            />\n          }\n          label=\"In hoa chữ cái đầu của mỗi từ\"\n        /> */}\n      </Grid>\n      <Grid container className=\"Xoong\">\n        <Grid container xs={9} item>\n          <TextField\n            className=\"BapSong\"\n            type=\"text\"\n            name=\"bapSong\"\n            id=\"content\"\n            onChange={luocBap}\n            value={bapSong}\n            label=\"Bắp sống\"\n            variant=\"outlined\"\n          />\n        </Grid>\n        <Grid container direction=\"row\" className=\"BapChinContainer\">\n          <Grid xs={9} item>\n            <TextField\n              ref={refBapChin}\n              multiline\n              className=\"BapChin\"\n              type=\"text\"\n              name=\"bapChin\"\n              id=\"bapChin\"\n              value={bapChin}\n              label=\"Bắp chín\"\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid xs={1} item />\n          <Grid xs={2} item>\n            <Button\n              disabled={!document.queryCommandSupported(\"copy\")}\n              variant=\"contained\"\n              color=\"primary\"\n              className=\"Button\"\n              onClick={onCopy}\n            >\n              Copy\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Snackbar\n        open={open}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\"\n        }}\n        autoHideDuration={2000}\n        message=\"Copied!\"\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}